generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id                  String                @id @default(uuid())
  email               String                @unique
  contactNumber       String?
  password            String
  role                String
  firstName           String?
  lastName            String?
  college             String?
  program             String?
  yearLevel           Int?
  schoolId            String?
  attempts            ReviewerAttempt[]
  ReviewerEditRequest ReviewerEditRequest[]
  ReviewerLog         ReviewerLog[]
  Notification        Notification[]
}

model Reviewer {
  id          String            @id @default(uuid())
  title       String
  description String?
  college     String
  program     String            @unique
  status      String
  dateCreated DateTime          @default(now())
  topics      Topic[]
  questions   Question[]
  attempts    ReviewerAttempt[]
  ReviewerLog ReviewerLog[]
}

model Topic {
  id                   String                 @id @default(uuid())
  title                String
  description          String?
  reviewerId           String
  reviewer             Reviewer               @relation(fields: [reviewerId], references: [id])
  subtopics            Subtopic[]
  questions            Question[]
  ReviewerAttemptScope ReviewerAttemptScope[]
}

model Subtopic {
  id                   String                 @id @default(uuid())
  title                String
  description          String?
  topicId              String
  topic                Topic                  @relation(fields: [topicId], references: [id])
  questions            Question[]
  ReviewerAttemptScope ReviewerAttemptScope[]
}

model Question {
  id                      String                    @id @default(uuid())
  content                 String?
  image                   String?
  correctAnswer           String
  points                  Int
  status                  String                    @default("Unlocked")
  subtopicId              String?
  subtopic                Subtopic?                 @relation(fields: [subtopicId], references: [id])
  topicId                 String?
  Topic                   Topic?                    @relation(fields: [topicId], references: [id])
  reviewerId              String
  reviewer                Reviewer                  @relation(fields: [reviewerId], references: [id])
  choices                 QuestionChoices[]
  ReviewerAttemptQuestion ReviewerAttemptQuestion[]
  ReviewerEditRequest     ReviewerEditRequest[]
}

model QuestionChoices {
  id         String   @id @default(uuid())
  content    String?
  image      String?
  index      String
  questionId String
  question   Question @relation(fields: [questionId], references: [id])
}

model ReviewerAttempt {
  id             String   @id @default(cuid())
  reviewerId     String
  userId         String
  status         String   @default("Ongoing")
  score          Int      @default(0)
  dateCreated    DateTime @default(now())
  expiresAt      DateTime
  questionAmount Int
  timeLimit      Float

  reviewer  Reviewer                  @relation(fields: [reviewerId], references: [id])
  user      User                      @relation(fields: [userId], references: [id])
  questions ReviewerAttemptQuestion[]
  scopes    ReviewerAttemptScope[]
}

model ReviewerAttemptScope {
  id         String  @id @default(cuid())
  topicId    String
  subtopicId String?
  attemptId  String

  attempt  ReviewerAttempt @relation(fields: [attemptId], references: [id])
  topic    Topic           @relation(fields: [topicId], references: [id])
  subtopic Subtopic?       @relation(fields: [subtopicId], references: [id])
}

model ReviewerAttemptQuestion {
  id         String          @id @default(cuid())
  questionId String
  number     Int
  attemptId  String
  userAnswer String?
  attempt    ReviewerAttempt @relation(fields: [attemptId], references: [id])
  question   Question        @relation(fields: [questionId], references: [id])
}

model ReviewerLog {
  id          String   @id @default(cuid())
  reviewerId  String
  userId      String
  action      String
  dateCreated DateTime @default(now())

  reviewer Reviewer @relation(fields: [reviewerId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  message   String
  link      String
  userId    String
  viewed    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model ReviewerEditRequest {
  id            String   @id @default(cuid())
  questionId    String
  userId        String
  status        String
  dateRequested DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id])
  question Question @relation(fields: [questionId], references: [id])
}
